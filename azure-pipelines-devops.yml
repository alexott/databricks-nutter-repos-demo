# Grab variables from the specific variable group
variables:
- group: 'Nutter Testing on DevOps'

trigger:
  batch: true
  branches:
    include:
    - '*'

  tags:
    include:
      - v*.*
      - prod

stages:
- stage: onPush
  condition: |
    and(
      ne(variables['Build.SourceBranch'], 'refs/heads/releases'),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  jobs:
  - job: onPushJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

    - script: |
        python -m pip install --upgrade pip nutter adal
      displayName: 'Install dependencies'

    - task: PythonScript@0
      inputs:
       scriptSource: 'inline'
       arguments: '$(client_id) $(client_secret) $(tenant_id)'
       script: |
        from adal import AuthenticationContext
        import sys
        import requests
        resource_id = "2ff814a6-3304-4ab8-85cb-cd0e6f879c1d"
        client_id = sys.argv[1]
        client_secret = sys.argv[2]
        tenant_id = sys.argv[3]
        authority_url = f"https://login.microsoftonline.com/{tenant_id}"
        auth_context = AuthenticationContext(authority_url)
        token_response = auth_context.acquire_token_with_client_credentials(resource_id, client_id, client_secret)
        access_token = token_response['accessToken']
        print('##vso[task.setvariable variable=AccessToken;]%s' % (access_token))

# https://docs.databricks.com/dev-tools/api/latest/repos.html
    - script: |
        set -x
        echo "Checking out the $(Build.SourceBranchName) branch"
        curl -s -n -X GET -o /tmp/staging-repo-info.json "$DATABRICKS_HOST/api/2.0/workspace/get-status" -H "Authorization: Bearer $DATABRICKS_TOKEN" -d '{"path":"/Repos/Staging/databricks-nutter-projects-demo"}'
        cat /tmp/staging-repo-info.json
        export STAGING_REPOS_ID=$(cat /tmp/staging-repo-info.json|grep '"object_type":"REPO"'|sed -e 's|^.*"object_id":\([0-9]*\).*$|\1|')
        curl -s -n -X PATCH -o "/tmp/$(Build.SourceBranchName)-out.json" "$DATABRICKS_HOST/api/2.0/repos/$STAGING_REPOS_ID" \
          -H "Authorization: Bearer $DATABRICKS_TOKEN" -d "{\"branch\": \"$(Build.SourceBranchName)\"}"
        cat "/tmp/$(Build.SourceBranchName)-out.json"
        grep -v error_code "/tmp/$(Build.SourceBranchName)-out.json"
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(AccessToken)
      displayName: 'Update Staging project'

    - script: |
        nutter run '/Repos/Staging/databricks-nutter-projects-demo/' --cluster_id $(CLUSTER_ID) --recursive --junit_report --timeout 500
      env:
        DATABRICKS_HOST: $(DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(AccessToken)
      displayName: 'Execute Nutter tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml' 
        failTaskOnFailedTests: true

- stage: onRelease
  condition: |
    eq(variables['Build.SourceBranch'], 'refs/heads/releases')
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - script: env | sort
        displayName: 'Environment / Context'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7

      - checkout: self
        persistCredentials: true
        clean: true
        displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

      - script: |
          python -m pip install --upgrade pip nutter adal
        displayName: 'Install dependencies'

      - task: PythonScript@0
        inputs:
         scriptSource: 'inline'
         arguments: '$(client_id) $(client_secret) $(tenant_id)'
         script: |
          from adal import AuthenticationContext
          import sys
          import requests
          resource_id = "2ff814a6-3304-4ab8-85cb-cd0e6f879c1d"
          client_id = sys.argv[1]
          client_secret = sys.argv[2]
          tenant_id = sys.argv[3]
          authority_url = f"https://login.microsoftonline.com/{tenant_id}"
          auth_context = AuthenticationContext(authority_url)
          token_response = auth_context.acquire_token_with_client_credentials(resource_id, client_id, client_secret)
          access_token = token_response['accessToken']
          print('##vso[task.setvariable variable=AccessToken;]%s' % (access_token))

      - script: |
          set -x
          echo "Checking out the releases branch"
          curl -s -n -X GET -o /tmp/prod-repo-info.json "$DATABRICKS_HOST/api/2.0/workspace/get-status" -H "Authorization: Bearer $DATABRICKS_TOKEN" -d '{"path":"/Repos/Staging/databricks-nutter-projects-demo"}'
          cat /tmp/prod-repo-info.json
          export STAGING_REPOS_ID=$(cat /tmp/prod-repo-info.json|grep '"object_type":"REPO"'|sed -e 's|^.*"object_id":\([0-9]*\).*$|\1|')
          curl -s -n -X PATCH -o "/tmp/releases-out.json" "$DATABRICKS_HOST/api/2.0/repos/$STAGING_REPOS_ID" \
            -H "Authorization: Bearer $DATABRICKS_TOKEN" -d "{\"branch\": \"releases\"}"
          cat "/tmp/releases-out.json"
          grep -v error_code "/tmp/releases-out.json"
        env:
          DATABRICKS_HOST: $(DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(AccessToken)
        displayName: 'Update Staging repository'

# We can do a separate set of the tests for release branches
      - script: |
          nutter run '/Repos/Staging/databricks-nutter-projects-demo/' --cluster_id $(CLUSTER_ID) --recursive --junit_report --timeout 500
        env:
          DATABRICKS_HOST: $(DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(AccessToken)
        displayName: 'Execute Nutter tests on release'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-*.xml' 
          failTaskOnFailedTests: true

